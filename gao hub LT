-- 本地聊天UI脚本
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TextService = game:GetService("TextService")
local TweenService = game:GetService("TweenService")
local StarterGui = game:GetService("StarterGui")
local HttpService = game:GetService("HttpService")
local UserInputService = game:GetService("UserInputService")

-- 创建主屏幕GUI
local ChatUI = Instance.new("ScreenGui")
ChatUI.Name = "LocalChatUI"
ChatUI.ResetOnSpawn = false
ChatUI.Parent = PlayerGui

-- 创建主框架
local MainFrame = Instance.new("Frame")
MainFrame.Name = "MainFrame"
MainFrame.Size = UDim2.new(0.3, 0, 0.5, 0)
MainFrame.Position = UDim2.new(0.01, 0, 0.5, 0)
MainFrame.AnchorPoint = Vector2.new(0, 0.5)
MainFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
MainFrame.BackgroundTransparency = 0.3
MainFrame.BorderSizePixel = 0
MainFrame.Parent = ChatUI

-- 创建标题栏 (拖动区域)
local TitleBar = Instance.new("Frame")
TitleBar.Name = "TitleBar"
TitleBar.Size = UDim2.new(1, 0, 0.08, 0)
TitleBar.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
TitleBar.BorderSizePixel = 0
TitleBar.Parent = MainFrame

-- 标题文本
local TitleText = Instance.new("TextLabel")
TitleText.Name = "TitleText"
TitleText.Size = UDim2.new(0.7, 0, 1, 0)
TitleText.Position = UDim2.new(0.15, 0, 0, 0)
TitleText.BackgroundTransparency = 1
TitleText.Text = "本地聊天 (拖动)"
TitleText.TextColor3 = Color3.fromRGB(255, 255, 255)
TitleText.Font = Enum.Font.SourceSansBold
TitleText.TextSize = 18
TitleText.Parent = TitleBar

-- 隐藏按钮
local HideButton = Instance.new("TextButton")
HideButton.Name = "HideButton"
HideButton.Size = UDim2.new(0.1, 0, 1, 0)
HideButton.Position = UDim2.new(0.9, 0, 0, 0)
HideButton.BackgroundTransparency = 1
HideButton.Text = "_"
HideButton.TextColor3 = Color3.fromRGB(255, 255, 255)
HideButton.Font = Enum.Font.SourceSansBold
HideButton.TextSize = 18
HideButton.Parent = TitleBar

-- 聊天内容滚动框
local ChatScroller = Instance.new("ScrollingFrame")
ChatScroller.Name = "ChatScroller"
ChatScroller.Size = UDim2.new(1, 0, 0.8, 0)
ChatScroller.Position = UDim2.new(0, 0, 0.08, 0)
ChatScroller.BackgroundTransparency = 1
ChatScroller.BorderSizePixel = 0
ChatScroller.ScrollBarThickness = 5
ChatScroller.AutomaticCanvasSize = Enum.AutomaticSize.Y
ChatScroller.CanvasSize = UDim2.new(0, 0, 0, 0)
ChatScroller.Parent = MainFrame

-- 聊天内容布局
local ChatLayout = Instance.new("UIListLayout")
ChatLayout.Name = "ChatLayout"
ChatLayout.Padding = UDim.new(0, 5)
ChatLayout.Parent = ChatScroller

-- 底部控制区域
local ControlPanel = Instance.new("Frame")
ControlPanel.Name = "ControlPanel"
ControlPanel.Size = UDim2.new(1, 0, 0.12, 0)
ControlPanel.Position = UDim2.new(0, 0, 0.88, 0)
ControlPanel.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
ControlPanel.BorderSizePixel = 0
ControlPanel.Parent = MainFrame

-- 关闭按钮
local CloseButton = Instance.new("TextButton")
CloseButton.Name = "CloseButton"
CloseButton.Size = UDim2.new(0.4, 0, 0.7, 0)
CloseButton.Position = UDim2.new(0.05, 0, 0.15, 0)
CloseButton.BackgroundColor3 = Color3.fromRGB(215, 60, 0)
CloseButton.BorderSizePixel = 0
CloseButton.Text = "关闭"
CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseButton.Font = Enum.Font.SourceSansBold
CloseButton.TextSize = 16
CloseButton.Parent = ControlPanel

-- 通知开关按钮
local NotifyButton = Instance.new("TextButton")
NotifyButton.Name = "NotifyButton"
NotifyButton.Size = UDim2.new(0.4, 0, 0.7, 0)
NotifyButton.Position = UDim2.new(0.55, 0, 0.15, 0)
NotifyButton.BackgroundColor3 = Color3.fromRGB(0, 120, 215)
NotifyButton.BorderSizePixel = 0
NotifyButton.Text = "通知: 开"
NotifyButton.TextColor3 = Color3.fromRGB(255, 255, 255)
NotifyButton.Font = Enum.Font.SourceSansBold
NotifyButton.TextSize = 16
NotifyButton.Parent = ControlPanel

-- 状态变量
local isChatEnabled = true
local isVisible = true
local notificationsEnabled = true
local soundId = "rbxassetid://2865227271"
local isDragging = false
local dragStartPos, frameStartPos

-- 创建通知声音
local sound = Instance.new("Sound")
sound.SoundId = soundId
sound.Parent = ChatUI

-- 缓存玩家头像
local avatarCache = {}

-- 获取玩家头像函数
local function GetPlayerAvatar(userId)
    if avatarCache[userId] then
        return avatarCache[userId]
    end
    
    local success, result = pcall(function()
        return Players:GetUserThumbnailAsync(userId, Enum.ThumbnailType.HeadShot, Enum.ThumbnailSize.Size100x100)
    end)
    
    if success then
        avatarCache[userId] = result
        return result
    else
        return "rbxassetid://0" -- 默认头像
    end
end

-- 拖动功能实现
local function StartDrag(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        isDragging = true
        dragStartPos = Vector2.new(input.Position.X, input.Position.Y)
        frameStartPos = Vector2.new(MainFrame.Position.X.Offset, MainFrame.Position.Y.Offset)
        
        -- 改变光标样式
        local dragConnection
        dragConnection = input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                isDragging = false
                dragConnection:Disconnect()
            end
        end)
    end
end

local function UpdateDrag(input)
    if isDragging then
        local delta = Vector2.new(input.Position.X, input.Position.Y) - dragStartPos
        local newPos = frameStartPos + delta
        
        -- 限制在屏幕范围内
        local viewportSize = workspace.CurrentCamera.ViewportSize
        local frameSize = MainFrame.AbsoluteSize
        
        newPos = Vector2.new(
            math.clamp(newPos.X, 0, viewportSize.X - frameSize.X),
            math.clamp(newPos.Y, 0, viewportSize.Y - frameSize.Y)
        )
        
        MainFrame.Position = UDim2.new(0, newPos.X, 0, newPos.Y)
    end
end

-- 设置拖动事件
TitleBar.InputBegan:Connect(StartDrag)
UserInputService.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        UpdateDrag(input)
    end
end)

-- 隐藏/显示界面 (不包括隐藏按钮)
local function ToggleVisibility()
    isVisible = not isVisible
    
    local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut)
    
    if isVisible then
        -- 显示界面
        HideButton.Text = "_"
        local tween = TweenService:Create(MainFrame, tweenInfo, {
            BackgroundTransparency = 0.3,
            Size = UDim2.new(0.3, 0, 0.5, 0)
        })
        tween:Play()
        ChatScroller.Visible = true
        ControlPanel.Visible = true
        TitleText.Visible = true
    else
        -- 隐藏界面 (保留隐藏按钮可见)
        HideButton.Text = "+"
        local tween = TweenService:Create(MainFrame, tweenInfo, {
            BackgroundTransparency = 1,
            Size = UDim2.new(0.3, 0, 0.08, 0)
        })
        tween:Play()
        ChatScroller.Visible = false
        ControlPanel.Visible = false
        TitleText.Visible = false
    end
end

HideButton.MouseButton1Click:Connect(ToggleVisibility)

-- 添加消息到聊天框
local function AddMessageToChat(playerName, message, playerUserId)
    -- 创建消息容器
    local messageFrame = Instance.new("Frame")
    messageFrame.Name = "MessageFrame"
    messageFrame.Size = UDim2.new(1, -10, 0, 0)
    messageFrame.AutomaticSize = Enum.AutomaticSize.Y
    messageFrame.BackgroundTransparency = 1
    messageFrame.Parent = ChatScroller
    
    -- 获取并显示头像
    local avatar = GetPlayerAvatar(playerUserId)
    
    local avatarImage = Instance.new("ImageLabel")
    avatarImage.Name = "Avatar"
    avatarImage.Size = UDim2.new(0.1, 0, 0.1, 0)
    avatarImage.Position = UDim2.new(0, 0, 0, 0)
    avatarImage.BackgroundTransparency = 1
    avatarImage.Image = avatar
    avatarImage.Parent = messageFrame
    
    -- 创建用户名标签
    local nameLabel = Instance.new("TextLabel")
    nameLabel.Name = "NameLabel"
    nameLabel.Size = UDim2.new(0.8, 0, 0.1, 0)
    nameLabel.Position = UDim2.new(0.12, 0, 0, 0)
    nameLabel.BackgroundTransparency = 1
    nameLabel.Text = playerName
    nameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    nameLabel.Font = Enum.Font.SourceSansBold
    nameLabel.TextSize = 14
    nameLabel.TextXAlignment = Enum.TextXAlignment.Left
    nameLabel.Parent = messageFrame
    
    -- 创建消息标签
    local messageLabel = Instance.new("TextLabel")
    messageLabel.Name = "MessageLabel"
    messageLabel.Size = UDim2.new(0.8, 0, 0, 0)
    messageLabel.Position = UDim2.new(0.12, 0, 0.1, 0)
    messageLabel.BackgroundTransparency = 1
    messageLabel.Text = message
    messageLabel.TextColor3 = Color3.fromRGB(220, 220, 220)
    messageLabel.Font = Enum.Font.SourceSans
    messageLabel.TextSize = 14
    messageLabel.TextXAlignment = Enum.TextXAlignment.Left
    messageLabel.TextYAlignment = Enum.TextYAlignment.Top
    messageLabel.TextWrapped = true
    messageLabel.AutomaticSize = Enum.AutomaticSize.Y
    messageLabel.Parent = messageFrame
    
    -- 自动滚动到底部
    ChatScroller.CanvasPosition = Vector2.new(0, ChatScroller.AbsoluteCanvasSize.Y)
end

-- 关闭确认函数
local function RequestClose()
    -- 显示确认通知
    StarterGui:SetCore("SendNotification", {
        Title = "关闭聊天界面",
        Text = "是否要关闭本地聊天界面? (12秒后自动取消)",
        Duration = 12,
        Button1 = "是",
        Button2 = "否",
        Callback = function(choice)
            if choice == 1 then -- 点击"是"
                ChatUI:Destroy()
            end
        end
    })
    
    -- 播放声音
    sound:Play()
end

CloseButton.MouseButton1Click:Connect(RequestClose)

-- 切换通知状态
local function ToggleNotifications()
    notificationsEnabled = not notificationsEnabled
    
    if notificationsEnabled then
        NotifyButton.Text = "通知: 开"
        NotifyButton.BackgroundColor3 = Color3.fromRGB(0, 120, 215)
    else
        NotifyButton.Text = "通知: 关"
        NotifyButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    end
end

NotifyButton.MouseButton1Click:Connect(ToggleNotifications)

-- 显示带头像的通知
local function ShowAvatarNotification(playerName, message, playerUserId)
    if not notificationsEnabled then return end
    
    -- 获取头像
    local avatar = GetPlayerAvatar(playerUserId)
    
    -- 创建自定义通知GUI
    local notificationGui = Instance.new("ScreenGui")
    notificationGui.Name = "ChatNotification"
    notificationGui.ResetOnSpawn = false
    notificationGui.Parent = PlayerGui
    
    local notificationFrame = Instance.new("Frame")
    notificationFrame.Name = "NotificationFrame"
    notificationFrame.Size = UDim2.new(0.3, 0, 0.1, 0)
    notificationFrame.Position = UDim2.new(0.35, 0, 0.05, 0)
    notificationFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    notificationFrame.BackgroundTransparency = 0.2
    notificationFrame.BorderSizePixel = 0
    notificationFrame.Parent = notificationGui
    
    local avatarImage = Instance.new("ImageLabel")
    avatarImage.Name = "Avatar"
    avatarImage.Size = UDim2.new(0.15, 0, 0.8, 0)
    avatarImage.Position = UDim2.new(0.02, 0, 0.1, 0)
    avatarImage.BackgroundTransparency = 1
    avatarImage.Image = avatar
    avatarImage.Parent = notificationFrame
    
    local nameLabel = Instance.new("TextLabel")
    nameLabel.Name = "NameLabel"
    nameLabel.Size = UDim2.new(0.6, 0, 0.3, 0)
    nameLabel.Position = UDim2.new(0.2, 0, 0.1, 0)
    nameLabel.BackgroundTransparency = 1
    nameLabel.Text = playerName
    nameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    nameLabel.Font = Enum.Font.SourceSansBold
    nameLabel.TextSize = 14
    nameLabel.TextXAlignment = Enum.TextXAlignment.Left
    nameLabel.Parent = notificationFrame
    
    local messageLabel = Instance.new("TextLabel")
    messageLabel.Name = "MessageLabel"
    messageLabel.Size = UDim2.new(0.75, 0, 0.5, 0)
    messageLabel.Position = UDim2.new(0.2, 0, 0.4, 0)
    messageLabel.BackgroundTransparency = 1
    messageLabel.Text = message
    messageLabel.TextColor3 = Color3.fromRGB(220, 220, 220)
    messageLabel.Font = Enum.Font.SourceSans
    messageLabel.TextSize = 14
    messageLabel.TextXAlignment = Enum.TextXAlignment.Left
    messageLabel.TextYAlignment = Enum.TextYAlignment.Top
    messageLabel.TextWrapped = true
    messageLabel.Parent = notificationFrame
    
    -- 播放声音
    sound:Play()
    
    -- 5秒后消失
    delay(5, function()
        notificationGui:Destroy()
    end)
end

-- 监听聊天消息
local function OnChatMessage(message, speaker)
    -- 添加到聊天框
    AddMessageToChat(speaker.Name, message, speaker.UserId)
    
    -- 显示带头像的通知
    ShowAvatarNotification(speaker.Name, message, speaker.UserId)
end

-- 监听玩家聊天
local function SetupPlayerChat(player)
    player.Chatted:Connect(function(message)
        OnChatMessage(message, player)
    end)
end

-- 为已存在的玩家设置监听
for _, player in ipairs(Players:GetPlayers()) do
    if player ~= LocalPlayer then
        SetupPlayerChat(player)
    end
end

-- 为新玩家设置监听
Players.PlayerAdded:Connect(function(player)
    SetupPlayerChat(player)
end)
